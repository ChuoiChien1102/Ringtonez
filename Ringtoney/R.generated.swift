//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 4 files.
  struct file {
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    /// Resource file `audio.mp3`.
    static let audioMp3 = Rswift.FileResource(bundle: R.hostingBundle, name: "audio", pathExtension: "mp3")
    /// Resource file `audio2.mp3`.
    static let audio2Mp3 = Rswift.FileResource(bundle: R.hostingBundle, name: "audio2", pathExtension: "mp3")
    /// Resource file `nasalization-rg.ttf`.
    static let nasalizationRgTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "nasalization-rg", pathExtension: "ttf")

    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "audio", withExtension: "mp3")`
    static func audioMp3(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.audioMp3
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "audio2", withExtension: "mp3")`
    static func audio2Mp3(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.audio2Mp3
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "nasalization-rg", withExtension: "ttf")`
    static func nasalizationRgTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.nasalizationRgTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 1 fonts.
  struct font: Rswift.Validatable {
    /// Font `NasalizationRg-Regular`.
    static let nasalizationRgRegular = Rswift.FontResource(fontName: "NasalizationRg-Regular")

    /// `UIFont(name: "NasalizationRg-Regular", size: ...)`
    static func nasalizationRgRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: nasalizationRgRegular, size: size)
    }

    static func validate() throws {
      if R.font.nasalizationRgRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'NasalizationRg-Regular' could not be loaded, is 'nasalization-rg.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 49 images.
  struct image {
    /// Image `background_introA`.
    static let background_introA = Rswift.ImageResource(bundle: R.hostingBundle, name: "background_introA")
    /// Image `background_introB`.
    static let background_introB = Rswift.ImageResource(bundle: R.hostingBundle, name: "background_introB")
    /// Image `background_premium_mask`.
    static let background_premium_mask = Rswift.ImageResource(bundle: R.hostingBundle, name: "background_premium_mask")
    /// Image `background_premium`.
    static let background_premium = Rswift.ImageResource(bundle: R.hostingBundle, name: "background_premium")
    /// Image `icon_button_fadeIn`.
    static let icon_button_fadeIn = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_button_fadeIn")
    /// Image `icon_button_fadeOut`.
    static let icon_button_fadeOut = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_button_fadeOut")
    /// Image `icon_button_pause`.
    static let icon_button_pause = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_button_pause")
    /// Image `icon_button_play`.
    static let icon_button_play = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_button_play")
    /// Image `icon_button_premium_close`.
    static let icon_button_premium_close = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_button_premium_close")
    /// Image `icon_button_premium`.
    static let icon_button_premium = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_button_premium")
    /// Image `icon_button_record`.
    static let icon_button_record = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_button_record")
    /// Image `icon_button_recordagain`.
    static let icon_button_recordagain = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_button_recordagain")
    /// Image `icon_button_stoprecord`.
    static let icon_button_stoprecord = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_button_stoprecord")
    /// Image `icon_cell_category`.
    static let icon_cell_category = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_cell_category")
    /// Image `icon_cell_download`.
    static let icon_cell_download = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_cell_download")
    /// Image `icon_cell_downloaded`.
    static let icon_cell_downloaded = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_cell_downloaded")
    /// Image `icon_cell_indicator`.
    static let icon_cell_indicator = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_cell_indicator")
    /// Image `icon_cell_more`.
    static let icon_cell_more = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_cell_more")
    /// Image `icon_cell_pause`.
    static let icon_cell_pause = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_cell_pause")
    /// Image `icon_cell_play`.
    static let icon_cell_play = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_cell_play")
    /// Image `icon_cell_ringtone`.
    static let icon_cell_ringtone = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_cell_ringtone")
    /// Image `icon_flash_sale`.
    static let icon_flash_sale = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_flash_sale")
    /// Image `icon_mytone_record`.
    static let icon_mytone_record = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_mytone_record")
    /// Image `icon_navigation_back`.
    static let icon_navigation_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_navigation_back")
    /// Image `icon_premium_introrow`.
    static let icon_premium_introrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_premium_introrow")
    /// Image `icon_ringtone_catalog`.
    static let icon_ringtone_catalog = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_ringtone_catalog")
    /// Image `icon_ringtone_maker`.
    static let icon_ringtone_maker = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_ringtone_maker")
    /// Image `icon_search`.
    static let icon_search = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_search")
    /// Image `icon_setting_premium`.
    static let icon_setting_premium = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_setting_premium")
    /// Image `icon_tabbar_category_selected`.
    static let icon_tabbar_category_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_tabbar_category_selected")
    /// Image `icon_tabbar_category_unselected`.
    static let icon_tabbar_category_unselected = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_tabbar_category_unselected")
    /// Image `icon_tabbar_home_selected`.
    static let icon_tabbar_home_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_tabbar_home_selected")
    /// Image `icon_tabbar_home_unselected`.
    static let icon_tabbar_home_unselected = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_tabbar_home_unselected")
    /// Image `icon_tabbar_mytone_selected`.
    static let icon_tabbar_mytone_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_tabbar_mytone_selected")
    /// Image `icon_tabbar_mytone_unselected`.
    static let icon_tabbar_mytone_unselected = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_tabbar_mytone_unselected")
    /// Image `icon_tabbar_setting_selected`.
    static let icon_tabbar_setting_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_tabbar_setting_selected")
    /// Image `icon_tabbar_setting_unselected`.
    static let icon_tabbar_setting_unselected = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_tabbar_setting_unselected")
    /// Image `img_getpremium`.
    static let img_getpremium = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_getpremium")
    /// Image `img_ringtone_catalog_thumb`.
    static let img_ringtone_catalog_thumb = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_ringtone_catalog_thumb")
    /// Image `img_ringtone_catalog`.
    static let img_ringtone_catalog = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_ringtone_catalog")
    /// Image `img_ringtone_maker_thumb`.
    static let img_ringtone_maker_thumb = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_ringtone_maker_thumb")
    /// Image `img_ringtone_maker`.
    static let img_ringtone_maker = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_ringtone_maker")
    /// Image `splash`.
    static let splash = Rswift.ImageResource(bundle: R.hostingBundle, name: "splash")
    /// Image `t1`.
    static let t1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "t1")
    /// Image `t2`.
    static let t2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "t2")
    /// Image `t3`.
    static let t3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "t3")
    /// Image `t4`.
    static let t4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "t4")
    /// Image `t5`.
    static let t5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "t5")
    /// Image `t6`.
    static let t6 = Rswift.ImageResource(bundle: R.hostingBundle, name: "t6")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "background_introA", bundle: ..., traitCollection: ...)`
    static func background_introA(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.background_introA, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "background_introB", bundle: ..., traitCollection: ...)`
    static func background_introB(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.background_introB, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "background_premium", bundle: ..., traitCollection: ...)`
    static func background_premium(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.background_premium, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "background_premium_mask", bundle: ..., traitCollection: ...)`
    static func background_premium_mask(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.background_premium_mask, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_button_fadeIn", bundle: ..., traitCollection: ...)`
    static func icon_button_fadeIn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_button_fadeIn, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_button_fadeOut", bundle: ..., traitCollection: ...)`
    static func icon_button_fadeOut(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_button_fadeOut, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_button_pause", bundle: ..., traitCollection: ...)`
    static func icon_button_pause(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_button_pause, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_button_play", bundle: ..., traitCollection: ...)`
    static func icon_button_play(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_button_play, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_button_premium", bundle: ..., traitCollection: ...)`
    static func icon_button_premium(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_button_premium, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_button_premium_close", bundle: ..., traitCollection: ...)`
    static func icon_button_premium_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_button_premium_close, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_button_record", bundle: ..., traitCollection: ...)`
    static func icon_button_record(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_button_record, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_button_recordagain", bundle: ..., traitCollection: ...)`
    static func icon_button_recordagain(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_button_recordagain, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_button_stoprecord", bundle: ..., traitCollection: ...)`
    static func icon_button_stoprecord(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_button_stoprecord, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_cell_category", bundle: ..., traitCollection: ...)`
    static func icon_cell_category(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_cell_category, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_cell_download", bundle: ..., traitCollection: ...)`
    static func icon_cell_download(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_cell_download, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_cell_downloaded", bundle: ..., traitCollection: ...)`
    static func icon_cell_downloaded(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_cell_downloaded, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_cell_indicator", bundle: ..., traitCollection: ...)`
    static func icon_cell_indicator(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_cell_indicator, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_cell_more", bundle: ..., traitCollection: ...)`
    static func icon_cell_more(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_cell_more, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_cell_pause", bundle: ..., traitCollection: ...)`
    static func icon_cell_pause(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_cell_pause, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_cell_play", bundle: ..., traitCollection: ...)`
    static func icon_cell_play(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_cell_play, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_cell_ringtone", bundle: ..., traitCollection: ...)`
    static func icon_cell_ringtone(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_cell_ringtone, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_flash_sale", bundle: ..., traitCollection: ...)`
    static func icon_flash_sale(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_flash_sale, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_mytone_record", bundle: ..., traitCollection: ...)`
    static func icon_mytone_record(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_mytone_record, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_navigation_back", bundle: ..., traitCollection: ...)`
    static func icon_navigation_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_navigation_back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_premium_introrow", bundle: ..., traitCollection: ...)`
    static func icon_premium_introrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_premium_introrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_ringtone_catalog", bundle: ..., traitCollection: ...)`
    static func icon_ringtone_catalog(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_ringtone_catalog, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_ringtone_maker", bundle: ..., traitCollection: ...)`
    static func icon_ringtone_maker(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_ringtone_maker, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_search", bundle: ..., traitCollection: ...)`
    static func icon_search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_search, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_setting_premium", bundle: ..., traitCollection: ...)`
    static func icon_setting_premium(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_setting_premium, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_tabbar_category_selected", bundle: ..., traitCollection: ...)`
    static func icon_tabbar_category_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_tabbar_category_selected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_tabbar_category_unselected", bundle: ..., traitCollection: ...)`
    static func icon_tabbar_category_unselected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_tabbar_category_unselected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_tabbar_home_selected", bundle: ..., traitCollection: ...)`
    static func icon_tabbar_home_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_tabbar_home_selected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_tabbar_home_unselected", bundle: ..., traitCollection: ...)`
    static func icon_tabbar_home_unselected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_tabbar_home_unselected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_tabbar_mytone_selected", bundle: ..., traitCollection: ...)`
    static func icon_tabbar_mytone_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_tabbar_mytone_selected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_tabbar_mytone_unselected", bundle: ..., traitCollection: ...)`
    static func icon_tabbar_mytone_unselected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_tabbar_mytone_unselected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_tabbar_setting_selected", bundle: ..., traitCollection: ...)`
    static func icon_tabbar_setting_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_tabbar_setting_selected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_tabbar_setting_unselected", bundle: ..., traitCollection: ...)`
    static func icon_tabbar_setting_unselected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_tabbar_setting_unselected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_getpremium", bundle: ..., traitCollection: ...)`
    static func img_getpremium(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_getpremium, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_ringtone_catalog", bundle: ..., traitCollection: ...)`
    static func img_ringtone_catalog(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_ringtone_catalog, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_ringtone_catalog_thumb", bundle: ..., traitCollection: ...)`
    static func img_ringtone_catalog_thumb(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_ringtone_catalog_thumb, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_ringtone_maker", bundle: ..., traitCollection: ...)`
    static func img_ringtone_maker(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_ringtone_maker, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_ringtone_maker_thumb", bundle: ..., traitCollection: ...)`
    static func img_ringtone_maker_thumb(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_ringtone_maker_thumb, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "splash", bundle: ..., traitCollection: ...)`
    static func splash(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.splash, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "t1", bundle: ..., traitCollection: ...)`
    static func t1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.t1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "t2", bundle: ..., traitCollection: ...)`
    static func t2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.t2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "t3", bundle: ..., traitCollection: ...)`
    static func t3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.t3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "t4", bundle: ..., traitCollection: ...)`
    static func t4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.t4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "t5", bundle: ..., traitCollection: ...)`
    static func t5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.t5, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "t6", bundle: ..., traitCollection: ...)`
    static func t6(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.t6, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "splash", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'splash' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
